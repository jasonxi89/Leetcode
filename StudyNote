总结：

遍历控制全局变量，无需return值

分治法return 值：无脑先递归左右，然后开始处理问题(先把任务都给小弟，然后跟小弟说怎么做)
return的东西要足够判断问题

搜索二叉树：中序遍历递增


联系
分治法（Divide & Conquer）与遍历法（Traverse）是两种常见的递归（Recursion）方法。

分治法解决问题的思路
先让左右子树去解决同样的问题，然后得到结果之后，再整合为整棵树的结果。

遍历法解决问题的思路
通过前序/中序/后序的某种遍历，游走整棵树，通过一个全局变量或者传递的参数来记录这个过程中所遇到的点和需要计算的结果。

两种方法的区别
从程序实现角度分治法的递归函数，通常有一个返回值，遍历法通常没有。

全子集问题，四种方法，非递归的类的有
1.选择法(0表示选这个，1表示不选)
2.BFS（回溯，deque）

递归
回溯：核心思想是递归的时候传进个可以开始选的index,然后for循环下一个可以开始选的位置，for循环里用回溯（先subset.add,然后递归，然后subset.move最后一个加进去的）
例如 123，1的时候，先变成12，然后变成123(这个是For里的递归搞定)，然后把2去掉(subset.remove搞定)，变成1,然后再加3，变成13(for循环搞定)


什么时候用BFS：深度比较深，最短路径，分层遍历，拓谷排序，非递归找所有方案

什么时候用DFS：找所有方案

比较DFS/BFS:BFS的空间复杂度，取决于宽度；DFS的空间复杂度，取决于深度。

PS:背诵Binary Tree iterator.

排列/组合问题:
1.子集，就传数字
2.全子集（有顺序），传visited数组

找路径问题基本都要回溯，找点的反而不用

记忆化一般只能记忆化字符串/数字表示的，如果是个数组或者类似的，记忆化无缘

O(答案总数 * 构造每个答案的时间)

LRU cache: Least Rencently used
LFU cache: Least Frequently used

LinkedList + dict  = queue

一个字典：dic = {}
dic[0]报错
dic.get(0,1) 输出1

Top K:
1.Quick Select -> offline O(n)
2.heap -> online
heap原理: 原理是2叉树，从小到大
heap用法:
  li = [1,3,5,6,7]
  li1 = [1,3,5,6,7]
  #merge 组合2个有序list
  test = list(heapq.merge(li1,li))
  #打印第九个
  print(test[9])
  #数组堆化
  heapq.heapify(li)
  #往heapq里丢0
  heapq.heappush(li,0)
  #取heapq里最大的2个数组(不重复)
  print(heapq.nlargest(2,li))
  print(list(li))
  #pop出来最小的，并且增加另一个值
  heapq.heappushpop(li,10)
  #最小的值剔除，并且增加新值
  heapq.heapreplace(li,10)
  print(list(li))
  print(hq)

  所以，尾递归是把变化的参数传递给递归函数的变量了。怎么写尾递归？形式上只要最后一个return语句是单纯函数就可以。
  尾递归最重要的是从一个子问题，推导出来另一个子问题

  BFS使用队列, DFS使用栈

  动态规划：最大值，最小值，可行性，方案总数
  换句话说：最优子结构，边界，状态转移方程

  递归的时候传值就用return，或者强行count[0]变成数组

动态规划4要素：
1.状态 State : 最优解/Max/Min, Yes/No, Count(*)
2.方程 Function : 状态之间的联系，怎么通过小的状态，来求得大的状态
3.初始化 Intialization : 最极限的小状态是什么, 起点
4.答案 Answer : 最大的那个状态是什么，终点


Word 4兄弟
Word Break, Word Ladder, Word Search, Word Pattern
